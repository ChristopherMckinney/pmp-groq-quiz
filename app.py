import os
import streamlit as st
import requests
import json
import re
import uuid
import random

# --- Page Config ---
st.set_page_config(
    page_title="OpSynergy PMP AI Quiz Generator",
    layout="centered",
    initial_sidebar_state="collapsed",
    menu_items={
        "Get help": None,
        "Report a Bug": None,
        "About": None
    }
)

# --- Banner ---
st.markdown("""
    <div style='width:100%; height:70px; background: linear-gradient(90deg, #D32F2F 0%, #FFFFFF 50%, #1976D2 100%);
    display:flex; align-items:center; justify-content:center; margin-bottom:30px; border-radius:10px;'>
        <h1 style='color:#222; font-size:24px;'>OpSynergy PMP AI Quiz Generator</h1>
    </div>
""", unsafe_allow_html=True)

# --- Input for topic ---
topic = st.text_input("Enter a PMP topic or leave blank for a random question:", "")

if st.button("Generate New Question"):
    # Groq API call
    GROQ_API_KEY = os.getenv("GROQ_API_KEY")
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}

    prompt = f"""
    Generate one PMP exam-style multiple choice question. 
    Topic: {topic if topic else "random PMP domain"}.
    Format the response in JSON like this:
    {{
        "question": "Question text here",
        "options": ["A. option1", "B. option2", "C. option3", "D. option4"],
        "answer": "B",
        "explanation": "Why the correct answer is correct."
    }}
    """

    response = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers=headers,
        json={
            "model": "llama-3-70b-chat",
            "temperature": 0.9,
            "messages": [{"role": "user", "content": prompt}]
        }
    )

    if response.status_code == 200:
        data = response.json()
        content = data["choices"][0]["message"]["content"]

        try:
            parsed = json.loads(content)
            st.subheader("Question")
            st.write(parsed["question"])

            choice = st.radio("Choose your answer:", parsed["options"], index=None)

            if choice:
                if choice.startswith(parsed["answer"]):
                    st.success("Correct!")
                else:
                    st.error("Incorrect.")
                st.markdown(f"**Explanation:** {parsed['explanation']}")

        except Exception:
            st.error("Error parsing question. Please try again.")
            st.text(content)
    else:
        st.error("Failed to generate question. Check API key or connection.")

# --- Disclaimer ---
st.markdown("""
<hr>
<p style='font-size:12px; text-align:center;'>
All questions are generated by AI and should be reviewed for accuracy. 
OpSynergy is not responsible for the validity or appropriateness of any content generated by this simulator. 
This tool is not affiliated with or endorsed by PMIÂ®.
</p>
""", unsafe_allow_html=True)
